#ifndef _CYANPRISM_ALGORITHM
#define _CYANPRISM_ALGORITHM



#include "_define"

namespace _CYANPRISM_NAMESPACE {


template <typename Type>
inline const Type& min(const Type& arg1_, const Type& arg2_) {
    return arg1_ < arg2_ ? arg1_ : arg2_;
}

template <typename Type>
inline Type& min(Type& arg1_, Type& arg2_) {
    return const_cast<Type&>(min(const_cast<const Type&>(arg1_), const_cast<const Type&>(arg2_)));
}


template <typename Type>
inline const Type& max(const Type& arg1_, const Type& arg2_) {
    return arg1_ > arg2_ ? arg1_ : arg2_;
}

template <typename Type>
inline Type& max(Type& arg1_, Type& arg2_) {
    return const_cast<Type&>(max(const_cast<const Type&>(arg1_), const_cast<const Type&>(arg2_)));
}


}



#endif /* _CYANPRISM_ALGORITHM */
