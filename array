#ifndef _CYANPRISM_ARRAY
#define _CYANPRISM_ARRAY



#include "_define"
#include "algorithm"
#include "base"

#include <cstddef>

namespace _CYANPRISM_NAMESPACE {


template <typename Type>
class dynamic_array;

template <typename Type, size_t Size>
class static_array;

namespace _CYANPRISM_NAMESPACE_DETAILS {
    template<typename Type, size_t Size = 0>
    struct _array {
        using type = static_array<Type, Size>;
    };

    template<typename Type>
    struct _array<Type, 0> {
        using type = dynamic_array<Type>;
    };
}

template <typename Type, size_t Size = 0>
using array = typename _CYANPRISM_NAMESPACE_DETAILS::_array<Type, Size>::type;


template <typename Type>
class dynamic_array : public base_array<Type> {
public:
    dynamic_array() : _size(0), _scale(0), _array(nullptr) {}

    explicit dynamic_array(size_t size_, const Type& default_ = Type()) :
            _size(size_), _scale(size_), _array(new Type[size_])
    {
        for (size_t index = 0; index < size_; ++index) {
            _array[index] = default_;
        }
    }

    dynamic_array(const dynamic_array<Type>& other_) :
            _size(other_._size), _scale(other_._scale), _array(new Type[_scale])
    {
        for (size_t index = 0; index < _size; ++index) {
            _array[index] = other_._array[index];
        }
    }

    template <typename Array, typename = enable_if_base_array_t<Array>>
    explicit dynamic_array(const Array& other_) : _size(other_.size()), _scale(other_.size()), _array(new Type[_size]) {
        for (size_t index = 0; index < _size; ++index) {
            _array[index] = other_[index];
        }
    }

    dynamic_array(dynamic_array<Type>&& other_) : _size(other_._size), _scale(other_._scale), _array(other_._array) {
        other_._size = other_._scale = 0;
        other_._array = nullptr;
    }

    template <typename Array, typename = enable_if_base_array_t<Array>>
    explicit dynamic_array(Array&& other_) : _size(other_.size()), _scale(other_.size()), _array(new Type[_size]) {
        for (size_t index = 0; index < _size; ++index) {
            _array[index] = std::move(other_[index]);
        }
    }

    ~dynamic_array() {
        delete[] _array;
    }

    dynamic_array<Type>& operator=(const dynamic_array& other_) {
        delete[] _array;
        _size = _scale = other_._size;
        _array = new Type[_scale];
        for (size_t index = 0; index < _size; ++index) {
            _array[index] = other_._array[index];
        }
        return *this;
    }

    template <typename Array, typename = enable_if_base_array_t<Array>>
    dynamic_array<Type>& operator=(const Array& other_) {
        delete[] _array;
        _size = other_.size();
        _scale = other_.size();
        _array = new Type[_scale];
        for (size_t index = 0; index < _size; ++index) {
            _array[index] = other_[index];
        }
        return *this;
    }

    dynamic_array<Type>& operator=(dynamic_array&& other_) {
        delete[] _array;
        _size = other_._size;
        _scale = other_._scale;
        _array = other_._array;
        other_._size = other_._scale = 0;
        other_._array = nullptr;
        return *this;
    }

    template <typename Array, typename = enable_if_base_array_t<Array>>
    dynamic_array<Type>& operator=(Array&& other_) {
        delete[] _array;
        _size = _scale = other_.size();
        _array = new Type[_scale];
        for (size_t index = 0; index < _size; ++index) {
            _array[index] = std::move(other_[index]);
        }
        return *this;
    }

    inline size_t size() const {
        return _size;
    }

    inline size_t scale() const {
        return _scale;
    }

    void rescale(size_t new_scale_) {
        if (new_scale_ == _scale) { return; }
        _size = cp::min(_size, new_scale_);
        auto new_array = new Type[new_scale_];
        for (size_t index = 0; index < _size; ++index) {
            new_array[index] = std::move(_array[index]);
        }
        delete[] _array;
        _array = new_array;
        _scale = new_scale_;
    }

    void resize(size_t new_size_) {
        if (new_size_ > _scale) {
            rescale(max(new_size_, static_cast<size_t>(_scale * _scale_coefficient)));
            _size = new_size_;
        } else if (new_size_ <= static_cast<size_t>(_scale / _scale_coefficient_2)) {
            _size = new_size_;
            rescale(min(new_size_, static_cast<size_t>(_scale / _scale_coefficient)));
        } else {
            _size = new_size_;
        }
    }

    Type& operator[](size_t index_) {
        if (index_ >= _size) {
            resize(index_ + 1);
        }
        return _array[index_];
    }

    const Type& operator[](size_t index_) const {
        if (index_ >= _size) {
            throw;
        }
        return _array[index_];
    }

    Type& push_back() {
        return operator[](size());
    }

    template <typename Type_>
    Type& push_back(Type_&& value_) {
        return (operator[](size()) = std::forward<Type_>(value_));
    }

    template <typename Array, typename = enable_if_base_array_t<Array>>
    dynamic_array<Type>& operator+=(const Array& other_) {
        for (size_t index = 0; index < other_.size(); ++index) {
            push_back(other_[index]);
        }
        return *this;
    }

    template <typename Array, typename = enable_if_base_array_t<Array>>
    dynamic_array<Type>& operator+=(Array&& other_) {
        for (size_t index = 0; index < other_.size(); ++index) {
            push_back(std::move(other_[index]));
        }
        return *this;
    }

private:
    size_t _size;
    size_t _scale;
    Type* _array;
    static constexpr float _scale_coefficient = 1.25;
    static constexpr float _scale_coefficient_2 = _scale_coefficient * _scale_coefficient;
};

template <typename Type, typename Array, typename = enable_if_base_array_t<Array>>
dynamic_array<Type> operator+(const dynamic_array<Type>& array_, Array&& other_) {
    dynamic_array<Type> result(array_);
    result += std::forward<Array>(other_);
    return result;
}

template <typename Type, typename Array, typename = enable_if_base_array_t<Array>>
dynamic_array<Type> operator+(dynamic_array<Type>&& array_, Array&& other_) {
    dynamic_array<Type> result(std::move(array_));
    result += std::forward<Array>(other_);
    return result;
}


template <typename Type, size_t Size>
class static_array : public base_array<Type> {
public:
    static_array() = default;

    explicit static_array(const Type& default_) {
        for (size_t index = 0; index < Size; ++index) {
            _array[index] = default_;
        }
    }

    static_array(const static_array& other_) {
        for (size_t index = 0; index < Size; ++index) {
            _array[index] = other_._array[index];
        }
    }

    template <typename Array, typename = enable_if_base_array_t<Array>>
    explicit static_array(const Array& other_) {
        size_t size = min(Size, other_.size());
        for (size_t index = 0; index < size; ++index) {
            _array[index] = other_[index];
        }
        for (size_t index = size; index < Size; ++index) {
            _array[index] = Type();
        }
    }

    static_array(static_array&& other_) {
        for (size_t index = 0; index < Size; ++index) {
            _array[index] = std::move(other_._array[index]);
        }
    }

    template <typename Array, typename = enable_if_base_array_t<Array>>
    explicit static_array(Array&& other_) {
        size_t size = min(Size, other_.size());
        for (size_t index = 0; index < size; ++index) {
            _array[index] = std::move(other_[index]);
        }
        for (size_t index = size; index < Size; ++index) {
            _array[index] = Type();
        }
    }

    ~static_array() = default;

    static_array<Type, Size>& operator=(const static_array<Type, Size>& other_) {
        for (size_t index = 0; index < Size; ++index) {
            _array[index] = other_._array[index];
        }
        return *this;
    }

    template <typename Array, typename = enable_if_base_array_t<Array>>
    static_array<Type, Size>& operator=(const Array& other_) {
        size_t size = min(Size, other_.size());
        for (size_t index = 0; index < size; ++index) {
            _array[index] = other_[index];
        }
        for (size_t index = size; index < Size; ++index) {
            _array[index] = Type();
        }
        return *this;
    }

    static_array<Type, Size>& operator=(static_array<Type, Size>&& other_) {
        for (size_t index = 0; index < Size; ++index) {
            _array[index] = std::move(other_._array[index]);
        }
        return *this;
    }

    template <typename Array, typename = enable_if_base_array_t<Array>>
    static_array<Type, Size>& operator=(Array&& other_) {
        size_t size = min(Size, other_.size());
        for (size_t index = 0; index < size; ++index) {
            _array[index] = std::move(other_[index]);
        }
        for (size_t index = size; index < Size; ++index) {
            _array[index] = Type();
        }
        return *this;
    }

    inline size_t size() const {
        return Size;
    }

    Type& operator[](size_t index_) {
        return _array[index_];
    }

    const Type& operator[](size_t index_) const {
        return _array[index_];
    }

private:
    Type _array[Size];
};



}



#endif /* _CYANPRISM_ARRAY */
