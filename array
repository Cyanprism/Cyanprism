#ifndef _CYANPRISM_ARRAY
#define _CYANPRISM_ARRAY



#include "_define"
#include "algorithm"

#include <cstddef>

namespace _CYANPRISM_NAMESPACE {


template <typename Type>
class dynamic_array {
public:
    dynamic_array() : _size(0), _scale(0), _array(nullptr) {}

    dynamic_array(size_t size_) : _size(size_), _scale(size_), _array(new Type[size_]) {}

    ~dynamic_array() {
        delete[] _array;
    }

    inline size_t size() {
        return _size;
    }

    inline size_t scale() {
        return _scale;
    }

    void rescale(size_t new_scale_) {
        if (new_scale_ == _scale) { return; }
        _size = cp::min(_size, new_scale_);
        auto new_array = new Type[new_scale_];
        for (size_t index = 0; index < _size; ++index) {
            new_array = std::move(_array[index]);
        }
        delete[] _array;
        _array = new_array;
        _scale = new_scale_;
    }

    void resize(size_t new_size_) {

    }

    Type& operator[](size_t index_) {

    }

private:
    size_t _size;
    size_t _scale;
    Type* _array;
    static constexpr float _scale_coefficient = 1.25;
    static constexpr float _scale_coefficient_2 = _scale_coefficient * _scale_coefficient;
};



}



#endif /* _CYANPRISM_ARRAY */
